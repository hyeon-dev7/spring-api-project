{{>layouts/header}}
<div class="container">
    {{#reviewed}}
        <table class="table table-hover align-middle mt-4" style="border-collapse: collapse;">
            <thead>
            <tr style="height: 7.5rem;">
                <th style="width: 6rem;"></th>
                <th style="max-width: 650px;">후기</th>
                <th style="width: 6rem; padding-left: 0.8rem;">수정 / 삭제</th>
            </tr>
            </thead>
            <tbody>
            {{#reviews.content}}
                <tr style="height: 7.5rem;">
                    <!-- 이미지 -->
                    <td style="padding: 4px; vertical-align: middle;">
                        <img src="{{#bookData.image}}{{bookData.image}}{{/bookData.image}}" alt="{{bookData.title}}"
                             style="width: 6rem; max-height: 7.5rem; display: block; object-fit: cover;">
                    </td>
                    <!-- 후기/별점/작성일 -->
                    <td style="padding: 0.2rem 0.5rem 0.2rem 0.7rem; line-height: 1.2; word-break: break-word; white-space: pre-wrap;">
                        <div class="review-content" style="margin-bottom: 0.3rem;">{{content}}</div>
                        <div class="d-flex flex-column" style="font-size: 0.85rem; color: #6c757d; gap: 1px;">
                            <div class="starsArea" data-stars="{{stars}}"></div>
                            <div>{{createdDate}}</div>
                        </div>
                    </td>
                    <!-- 수정/삭제 버튼 -->
                    <td style="padding: 0 0.6rem; vertical-align: middle; text-align: right;">
                        <button class="btn btn-sm btn-outline-primary" data-stars="{{stars}}" data-content="{{content}}"
                                data-review-id="{{id}}"
                                data-book-title="{{bookData.title}}"
                                data-book-image="{{#bookData.image}}{{bookData.image}}{{/bookData.image}}">
                            <i class="fa-solid fa-pen"></i>
                        </button>
                        <button data-review-id="{{id}}" data-book-title="{{bookData.title}}"
                                class="btn btn-sm btn-outline-danger">
                            <i class="fa-solid fa-trash"></i>
                        </button>
                    </td>
                </tr>
            {{/reviews.content}}
            </tbody>
        </table>
        <ul class="pagination justify-content-center" id="pagination"></ul>
    {{/reviewed}}
    {{^reviewed}}
        <div style="margin-top: 3rem; text-align: center;"> 아직 작성한 후기가 없습니다.</div>
    {{/reviewed}}
</div>
{{>layouts/footer}}

<script>
    drawStars();
    const totalPages = {{&reviews.totalPages}};
    const currentPage = {{&reviews.number}}; // 현재 페이지
    if (totalPages > 1) {
        renderPagination(currentPage, totalPages, onPageClick);
    }

    function onPageClick(page) {
        const url = new URL(window.location.href);
        url.searchParams.set("page", page); // page 파라미터 설정
        window.location.href = url.toString(); // 새 URL로 이동
    }

    document.addEventListener("click", async (e) => {
        const delBtn = e.target.closest(".btn-outline-danger");
        if (!delBtn) return;

        const reviewId = delBtn.dataset.reviewId;
        const bookTitle = delBtn.dataset.bookTitle;
        const confirmed = confirm(`"${bookTitle}" 후기를 삭제하시겠습니까?`);
        if (!confirmed) return;
        try {
            // 로딩 표시가 있다면 여기서 showLoader() 호출 가능
            const response = await fetch(`/api/review/delete/${reviewId}`, {
                method: "DELETE"
            });

            if (!response.ok) {
                const errorData = await response.json();
                alert(errorData.message || "삭제에 실패했습니다.");
                return;
            }
            location.reload();

        } catch (error) {
            console.error("삭제 중 오류 발생:", error);
            alert("네트워크 오류 또는 알 수 없는 문제가 발생했습니다.");
        }
    });

    document.addEventListener("click", async (e) => {
        const allButtons = document.querySelectorAll(".btn-outline-primary");
        const editBtn = e.target.closest(".btn-outline-primary");
        if (!editBtn) return;

        // 모든 버튼 비활성화
        allButtons.forEach(btn => {
            btn.disabled = true;
        });

        clearFieldErrors(["content", "stars"]);

        const reviewId = editBtn.dataset.reviewId;
        const stars = editBtn.dataset.stars;
        const content = editBtn.dataset.content;
        const bookTitle = editBtn.dataset.bookTitle;
        const bookImage = editBtn.dataset.bookImage;

        const tr = editBtn.closest("tr");
        const originalHTML = tr.innerHTML;

        // 기존 행을 폼으로 교체
        tr.innerHTML = `
    <td colspan="3" style="padding: 0;">
      <div class="card p-3 shadow-sm">
        <div class="row align-items-center">
          <div class="col-md-2">
            <img src="${bookImage}" alt="${bookTitle}" style="width: 80px;">
          </div>
          <div class="col-md-10">
        {{>book/reviewForm}}

          </div>
        </div>
      </div>
    </td>
  `;
        // 폼 요소 채우기
        const contentInput = tr.querySelector("#content");
        if (contentInput) contentInput.value = content;
        autoResizeTextarea();

        const starInputs = tr.querySelectorAll('input[name="stars"]');
        starInputs.forEach(star => {
            star.checked = star.value === stars;
        });

        const submitBtn = tr.querySelector("#reviewSubmitBtn");
        if (submitBtn) {
            submitBtn.dataset.reviewId = reviewId;
            submitBtn.onclick = async () => {
                clearFieldErrors(["content", "stars"]);
                const newContent = contentInput.value;

                try {
                    const response = await fetch(`/api/review/update/${reviewId}`, {
                        method: "PUT",
                        headers: {"Content-Type": "application/json"},
                        body: JSON.stringify({
                            id: reviewId,
                            content: newContent,
                            stars: getStarsValue()
                        })
                    });

                    if (response.ok) {

                        location.reload();
                        allButtons.forEach(btn => {
                            btn.disabled = false;
                        });

                    } else {
                        const errorData = await response.json();
                        showValidationErrors(errorData);
                        contentInput.value = newContent;
                    }
                } catch (error) {
                    alert("오류가 발생했습니다. 다시 시도해주세요.");
                }
            };
        }

        // 취소 버튼 추가
        const cancelBtn = document.createElement("button");
        cancelBtn.className = "btn btn-outline-secondary btn-sm ms-2";
        cancelBtn.textContent = "취소";
        cancelBtn.onclick = () => {
            tr.innerHTML = originalHTML;
            allButtons.forEach(btn => {
                btn.disabled = false;
            });
        };

        const buttonArea = submitBtn ? submitBtn.parentElement : undefined;
        if (buttonArea) buttonArea.appendChild(cancelBtn);
    });

</script>