{{>layouts/header}}
<div id="loader"></div>
<div class="container" style="margin-top: 2rem;">
    <div class="buttons" style="margin-bottom:1rem;">
        <button id="btn1" class="btn" data-loc="G">종합+스마트</button>
        <button id="btn2" class="btn" data-loc="C">어린이실</button>
        <button id="btn3" class="btn" data-loc="B">범사이상희문고</button>
    </div>

    <div id="resultArea"></div>
</div>
<ul class="pagination justify-content-center" id="pagination">
</ul>
{{>layouts/footer}}

<script>
    function updateURL(loc, page) {
        const url = `/book/popular?loc=${loc}&page=${page}`;
        window.history.pushState({loc, page}, '', url);
    }

    function setActiveButtonByLoc(loc) {
        document.querySelectorAll('.btn').forEach(btn => {
            btn.classList.remove("active");
            if (btn.dataset.loc === loc) {
                btn.classList.add("active");
                localStorage.setItem('activeBtnId', btn.id);
            }
        });
    }

    function loadBooksByLoc(loc, page = 0, shouldPushState = true) {
        const endpoint = `/api/books/popular?loc=${loc}&page=${page}`;
        showLoader();

        fetch(endpoint)
                .then(response => response.json())
                .then(data => {
                    renderResults(data.books, ["", "제목", "작가", "대출횟수", "더보기"], `/book/detail/{id}`);
                    if (data.totalPages > 1) {
                        renderPagination(page, data.totalPages, (newPage) => {
                            loadBooksByLoc(loc, newPage);
                        });
                    }
                    if (shouldPushState) {
                        updateURL(loc, page);
                    }
                })
                .catch(error => console.error('호출 오류:', error))
                .finally(() => hideLoader());
    }

    window.addEventListener("popstate", (event) => {
        const state = event.state;

        if (state) {
            const {loc, page} = state;
            setActiveButtonByLoc(loc);
            loadBooksByLoc(loc, page, false);
        } else {
            // fallback: URL에서 직접 파싱
            const params = new URLSearchParams(window.location.search);
            const loc = params.get("loc") || "G";
            const page = parseInt(params.get("page")) || 0;
            setActiveButtonByLoc(loc);
            loadBooksByLoc(loc, page, false);
        }
    });

    document.addEventListener("DOMContentLoaded", () => {
        const params = new URLSearchParams(window.location.search);
        const urlLoc = params.get("loc") || "G";
        const urlPage = parseInt(params.get("page")) || 0;

        const activeBtnId = localStorage.getItem('activeBtnId');
        let loc = urlLoc;
        let page = urlPage;

        // 버튼 상태 설정
        setActiveButtonByLoc(loc);

        // 초기 데이터 로딩
        loadBooksByLoc(loc, page);

        // 지역 버튼 클릭 이벤트 등록
        document.querySelectorAll('.btn').forEach(btn => {
            btn.addEventListener("click", () => {
                const buttonId = btn.id;
                const loc = btn.dataset.loc;

                setActiveButtonByLoc(loc);
                loadBooksByLoc(loc, 0); // 지역 변경 시 첫 페이지부터
            });
        });
    });

</script>